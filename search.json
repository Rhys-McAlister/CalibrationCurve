[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "Create an instance of the class CalibrationModel by passing in the path to both your calibration data and your sample data. Next specify the name of your response variable and the nummber of test replicates you measured.\nsns.set_style(\"white\")\nsns.set_style(\"ticks\")\nsource"
  },
  {
    "objectID": "core.html#tests",
    "href": "core.html#tests",
    "title": "core",
    "section": "Tests",
    "text": "Tests\nA couple of quick tests to make sure nothing is broken.\n\nassert cal.inverse_prediction(20.5) == 5.5"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CalibrationCurve",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "CalibrationCurve",
    "section": "Install",
    "text": "Install\npip install CalibrationCurve"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "CalibrationCurve",
    "section": "How to use",
    "text": "How to use\n\ndef generate_test_data(slope, intercept):\n        x = np.linspace(1, 10, num=5)\n        y = intercept + x * slope\n        df = pd.DataFrame({'concentration': x, \"abs\": y})\n        return df\n\ndef generate_sample_data():\n    x = np.array(['unknown1', 'unknown2'])\n    y = np.array([13.75, 20.50])\n    df = pd.DataFrame({'sample': x, \"abs\": y})\n    df = df.set_index('sample')\n    return df\n\n\ntest_data = generate_test_data(3, 4)\nsample_data = generate_sample_data()\n\n\nCalibrationCurve = cc.CalibrationModel(test_data, sample_data, 1)"
  }
]